<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>dp优化整理</title>
    <url>/2023/06/30/dp%E4%BC%98%E5%8C%96%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="决策单调性"><a href="#决策单调性" class="headerlink" title="决策单调性"></a>决策单调性</h2><p>决策单调性通常使用四边形不等式证明。</p>
<p>（似乎以前有一个很好的关于证明四边形不等式的课件）</p>
<p>概念</p>
<ul>
<li>四边形不等式：即对于任意 $l \le l’ \le r’ \le r $ 都满足 $w(l,r)+w(l,r’) \ge w(l,r’)+w(l’,r)$。</li>
<li>区间包含单调性：即对于任意 $l \le l’ \le r’ \le r $ 都满足 $w(l,r) \ge w(l’,r’)$ 。</li>
</ul>
<h3 id="区间类2D1D型动态规划"><a href="#区间类2D1D型动态规划" class="headerlink" title="区间类2D1D型动态规划"></a>区间类2D1D型动态规划</h3><p>形如 $dp_{l,r}=\min\limits_k(dp_{l,k}+dp_{k+1,r})+w(l,r)$ 。</p>
<p> 直接转移时间复杂度为 $O(n^3)$ 。</p>
<p>Lemma: $w(l,r)$ 同时满足四边形不等式和区间包含单调性，则可以证明状态 $f_{l,r}$ 满足四边形不等式。</p>
<p>Theorem:若状态 $f$ 满足四边形不等式，则对于状态 $f_{l,r}$ 的最优决策点 $m_{l,r}$ 有 $m_{l,r-1} \le m_{l,r} \le m_{l+1,r}$ 。</p>
<p><a href="https://oi-wiki.org/dp/opt/quadrangle/#%E5%8C%BA%E9%97%B4%E7%B1%BB2d1d%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">证明</a>。</p>
<p>枚举的决策点总数为 ：</p>
<script type="math/tex; mode=display">
\sum \limits_{1\le l\le r\le n}m_{l+1,r}-m_{l,r-1}=\sum\limits_{i=1}^nm_{i,n}-m_{1,n-i+1} \le n^2</script><p>时间复杂度 $O(n^2)$ 。</p>
<h3 id="分治优化"><a href="#分治优化" class="headerlink" title="分治优化"></a>分治优化</h3><p>形如 $f_i=\min\limits_{j&lt;i}(g_j+w(j,i))$ 。</p>
<p>即当前的转移不依赖于同层的dp值，因此我们可以任意决定同层内的dp计算顺序，常见于分层转移的二维dp。</p>
<p>当 $w(l,r)$ 满足四边形不等式，则决策点依然满足单调性 $m_i\le m_{i+1}$<br>考虑分治，每次选取mid算出其决策点，则两边的决策点上界/下界得到更新。</p>
<p>对于分治在同一层的多个子问题（即长度规模相同的），总的枚举量为 $O(n)$ 。</p>
<p>共 $O(\log n)$ 层，时间复杂度 $O(n\log n)$ 。</p>
<p><a href="https://codeforces.com/problemset/problem/868/F">Yet Another Minimization Problem</a></p>
<h3 id="1D1D动态规划"><a href="#1D1D动态规划" class="headerlink" title="1D1D动态规划"></a>1D1D动态规划</h3><p>形如 $f_i=\min\limits_{j&lt;i}(f_j+w(j,i))$ 。</p>
<p>当$w(i,j)$ 满足四边形不等式时，决策点单调。</p>
<p>证明：</p>
<p>设 $f_i$ 的最优决策点为 $m_i$ ，设 $i’&lt;i$。<br>根据四边形不等式可知 $w（i’,i+1)+w(m_i+i) \ge w(i’+i)+w(m_i,i+1)$。</p>
<p>由于 $m_i$ 是最优决策点，则有 $f_{m_i}+w(m_i,i) \le f_{i’}+w(i’,i)$ 。</p>
<p>根据上述两式，可得，$f_{m_i}+w(m_i,i+1) \le f_{i’}+w(i’,i+1)$<br>即 $m_{i+1} \ge m_i$。</p>
<p>双指针即可，时间复杂度 $O(n)$ 。</p>
<h2 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h2><p>形如 $f_i=\min\limits_{j}({a_i\times b_j+c_i+d_j})$。<br>其中 $a_i \times b_j$ 同时与 $i,j$ 有关。</p>
<p>当 $j$ 是最优决策点时，通过移项可以得到 $-d_j=a_i\times b_j -f_i +c_i$<br>我们可以把上述式子看做 $y=kx+b$ 的形式。</p>
<p>则，点 $(x,y)$ 等价于 $(b_j,-d_j)$ ，而关于 $i$ 的量转化为斜率 $a_i$ （以及一些无关紧要的常量 $c_i$ ）。</p>
<p>则每个决策点都可以看做坐标系上一点，对于每个 $i$ 我们用一个固定斜率的直线去穿过这些点，找到一个点使得截距最大或最小。</p>
<p>而坐标系上的很多决策点是永远不可能最优的，我们可以将其丢弃。可以证明，最终有用的决策点在坐标系上是一个凸包，斜率具有单调性。<br>而对于一条斜率为 $k$ 的直线，在凸包上截距是一个单谷函数。</p>
<p>根据具体问题分析是上凸包还是下凸包。(大概和取 $\min$ 或是 $\max$ 有关吧)。</p>
<p>值得注意的是，$b_j$ 即 $X(j)$ 最好为单增，方便维护。</p>
<p>当 $X(j)$ 不具有单调性时，在凸包上插入点集就无法使用单调队列去维护了（可以<a href="https://www.luogu.com.cn/problem/P4027">cdq分治</a>，平衡树之类的但我不会）。</p>
<p>当 $X(j)$ 和斜率 $k$ 都具有单调性，即决策具有单调性，每次都可以直接弹出队首更新答案。</p>
<p><a href="https://www.luogu.com.cn/problem/P3195">[HNOI2008] 玩具装箱</a><br><a href="https://www.luogu.com.cn/problem/P2900">[USACO08MAR] Land Acquisition G</a><br> <a href="https://www.luogu.com.cn/problem/P5785">[SDOI2012] 任务安排</a>（当斜率不具有单调性，可以二分。）<br><a href="https://zhuanlan.zhihu.com/p/622041814">套路化解决斜率优化问题</a><br><a href="https://www.cnblogs.com/Xing-Ling/p/11210179.html">斜率优化详解</a></p>
<h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p>矩阵快速幂的运用需要证明矩阵乘法具有结合律，并且它通常不具有交换律。<br>一个 $1\times n$ 的矩阵与 $n\times n$ 的矩阵相运算时间复杂度是 $n^2$ 的。<br><a href="https://www.luogu.com.cn/problem/P3328">音质检测</a><br>运用这样的思想，可以运用树剖把序列问题转化为树上问题，这就是ddp。ddp多可以用于维护修改，我们在一条重链/轻链上做矩阵乘法，手动维护链顶的父亲的dp值。<br><a href="https://www.luogu.com.cn/problem/P4719">模板</a><br>运用黑科技全局平衡二叉树，可以将模板题去掉一个 $\log$ 。<br><a href="https://www.luogu.com.cn/problem/P4751">模板加强版</a><br>当一些可以使用ddp的题目上的修改只对单次询问有效时，可以不使用ddp，而是用倍增维护。<br><a href="https://www.luogu.com.cn/problem/5024">保卫王国</a></p>
<h2 id="数据结构优化"><a href="#数据结构优化" class="headerlink" title="数据结构优化"></a>数据结构优化</h2><p>譬如<a href="https://xxzx.moe/2023/04/27/pkuwc2018minimax/">[PKUWC2018]Minimax</a><br>使用线段树合并加速。</p>
<h2 id="wqs二分"><a href="#wqs二分" class="headerlink" title="wqs二分"></a>wqs二分</h2><p>解决的是当dp形如 $dp_{i,j}=\max\limits_k{dp_{k,j-1}+w(k,i)}$ 即，有取 $m$ 个数的限制的问题。它需要满足选 $i$ 个物品的最大值 $g(i)$ 是一个凸包，权值和斜率随着选的物品数量单调变化。<br>对于 $g(i)$ 这个凸包，我们相当于要求出 $g(m)$ ，即，找到 $(m,g(m))$ 这个点。</p>
<p>下文假设都是上凸包，下凸包反一反即可。</p>
<p>根据上凸包的性质，随着点的横坐标增大，切这个点的直线的斜率也递减。反过来想，对于给定的斜率，如何知道它是凸包上哪一点的切线呢？<br><img src="https://xxzx.moe/wp-content/uploads/2023/08/dp优化整理1.png" alt=""><br>我们会发现，当这条直线穿过它相切的点 $(x,g(x))$ 的时候，截距 $b$ 最大。$g(x)=kx+b$ 。移项一下， $b=kx-g(x)$ 。我们要求的就是最大的 $b$ ，而取到这个最大的 $b$ 的 $x$ 就是我们要找的点了。<br><img src="https://xxzx.moe/wp-content/uploads/2023/08/dp优化整理2.png" alt=""><br>设 $f(x)=kx-g(x)$ 。我们发现， $g(x)$ 其实就是选 $x$ 个数的权值，我们不妨把选中每个数的权值都加上 $k$ ，这样 $f(x)$ 就转化为无选择物品数限制的新问题了，我们通常可以用更低复杂度的做法进行求解。</p>
<p>我们可以不断二分斜率进行调整，找到点 $m$ 及其对应的  $f(m)$，从而求出 $g(m)$ 。</p>
<p> 实现细节：</p>
<p>一条固定斜率的直线有可能会切到很多点，我们需要合理地判断哪里加等号，比如横坐标尽可能取更大的/更小的，与二分斜率部分相对应。<br><a href="https://www.luogu.com.cn/problem/P4983">忘情</a><br><a href="https://www.luogu.com.cn/problem/P2619">Tree I</a><br><a href="https://xxzx.moe/2024/02/15/arc168e/">ARC168E题解</a></p>
<h2 id="slope-trick"><a href="#slope-trick" class="headerlink" title="slope trick"></a>slope trick</h2><p><a href="https://www.luogu.com.cn/problem/P4597">序列</a></p>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>如何配置 vscode</title>
    <url>/2023/09/09/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE-vscode/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cb694767f02b957af74f8f412c20c7bb1467a6af8a6579a9b30dad831cf3ae8f">ffce6ed2b9da911e9229c3045da1ad40f2bfad9d3722bbdca014e081a8d1e46501a31f25256ff2914e2df6a2411b901b49177c8ee4e3da7e1267864baa3188cd0f7f5db5f2a1e1163abaaccb5d5e755b136a5fc31e8a4e37e0e1272c8f430defe6fb265ccddf995f78991a4e4949d592dd9d7cbbc5136f1ae65135c8ea5dd685d8925130257c21bbd0e044db895cfc2d2f8775fbf1f5852575492d5aa376e882c721abe505224dc2c023d8e1fd8e17085c19ece70d5799cbdb9524385766fa600b9e3dd32c8cb65d35451ebec0e52c6a94a438b70e3be55a66da4d17e61bca43fcc0d36d55d8e9a4880401840b6ced83234770f7fba9ddbb24af78c188181b7859d5869bf349bd1b53b14132f0c411faa5a9a5115b7dc22fc6447e3b2476ceeb98129030ecbcffae399a981857fbfd4051a55af8bf0ef48789012b532b3917c69251137204bc5f35b248c50a3da58ec843e34980986c6570449ca13496ac787069ed509d5377ab227136af60717a09cddc7ac1fc43dea8ae40b12fd4f2575a47b8a55761415e0d88b067f684aa17f1caa6f31dfcbf651be9ed643762293cb34d5a625d15b26e2dfde270dcb409c959ca52cc436d3668129fd56b32c8891613fa9f927fcbf2717a8cac505d314cfce48ff4fb6701e06c876caa37c4a3b2068911aaab04deadd655d5af74cf6bb40d5eb57768601d0b55ad3d301f08d438e4e93412f187fdeb22c60abb0861ea400547cb3e76e5d655022045be3aaceda19eeae004e41002746a270656110aa91027e9b1e8738e87b9131ed215c8119fdb770f7ecc8d3f35e2de9c049156da5b738b53a021bb8fa720f26c9633ebb2b8c840960dc01f092b1313df38428245fff3a4cea4b12ed6644641686afa1a1c372df75a65fa32ee83c8d37ca77e37c168876bc859341f9ca2080983beb6aee39c6f7f789a0b368baaa570d8cb97921de6e9d7c0c1e372501328d455c6eb97100240c7993c88147b563ee050a90454d8f7b68618a5eb66836263e4c774f5a497d875a590df94b8165800843978d2d4dcd0b896a99fe45f5ad478e4d604f65bf869b0e4490b68ccb0894f6adecb2a79ae739e65b2f91e341bcdc50c1ad187f8a691f094dd63b261224bc59714831777de55f409385db2bb54d442c2c66c26aa28ed94d56a8fb2ffab29d015398c874aa1b6c558984f21405401472817acc161da24972bfa4159b526bee0f62fb2eef12769bc96deb3bfd8bdffd4c8aa946d933bb872f5291120514f70761a17e88916ea421b057060b1f824f7ed69456efa8ec8cce788f236946b390877475164f775a7eb715aae1668244cbff3ba87cbd521cd41aeffe748680437f71b1f11fc239fae318c0a97b2b85f6905835b2d3917a4981cfe24a8d64420604741a625ee0e0a1e8f68e2f3abb5b8fac14f1103ec98c809407c5b42f99eecd05daca482195c857172c1c8237aa61af67983fd4e535c507b087e798bf8e645159278f4151c1d302d12dfe8aa3e6a4d3f76d5c37e69d5fa0f4f624f312b85d711359baf8e03d99bbbca936e174dc8aafed86315372534a680d87028f9b3fe4dc2307bb6202a9c44393c478c2fdca969ae5bfc6e728ada9b1adee75b17c6ff31fa6d78ff926addebaaca52509e6013b1b6ecdefb6e3a18da05926920b3cd9cf4e1dcff708fa9db9c95407f128ddc408a073fc82b3f04b8ca2da724825f3a4e2eb33949efa81244f077efa4ccbf943063326441c1168ec5d999659654ea174f469fe257b3f8ff6029fad91b0b51e042b369394d8aae649e06e05e1e977a7f476742af45656327b2aabf7f52f065c3f52c93a976986205692b6cdd47d96c6c0ef5d7b4002389fc7f8caef04dc26cb89a38a0187ef39336a078c42cc5081f8709f259d630444758be0eff3931036adae52f4b3a04d7339d64c16b1390c80d83da10d0a443b79dae12aa2bb9dc6f26cdf1edace3cbf7ff6400b68cad11a97036ac2d0c34a11e6d99822372dd4d999fed987cc1bdce6bdd2c6725a41823ad580306dbea668ea80734ed77842506547a2efcba0957130656ee272068a087ec2a4e7729bf5fba674b6e65474914b33de83f663215b51fec39c5dc9d1412c5072d8666580fdeaa9280dd5d7ba0d06450a33f3dfcb9254eba32d82e6a76bef836ce35ee4e859517ce51c9b95884b79338b9fa974bc6a3f2703df8c18b5994d994c1c59836d4f1ef43200463c30654f1f6fd6cb43752eda97bb8745de3a22d13c7d11b93fa07918acab032b954c3ea327975227f66eae0516c7d4978112fb8548585908aa255d7cb5c2f986ef0a05d78ecfabba38c659c1e596564a9222ea70a6d9b7e65e6b9b8358462e8758e5993d19530d7b0a1852438156ff41d67a636c7b110fed475cce552112f9a8b290b29c1836d9b325c2e62fdf3aebcdeac71c8eded7fd27d11e1daf9dfee32bfa52d6141f88312960511b5048c585e67bcb182489fd6dd3b92ab0167f7ca51e84545d1daa82b0d01f1b2825d6915f2c6a1ba2cd2a2be8ce2646388031c831eea25d41fa8457992d06c58df5ef0ade68655e0011bd2f66c94ca0529206ca75b6eac469f41a16707</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>平衡树学习笔记</title>
    <url>/2024/02/25/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="平衡树定义"><a href="#平衡树定义" class="headerlink" title="平衡树定义"></a>平衡树定义</h1><p>二叉搜索树是一种二叉树的树形数据结构，其满足任意点的权值大于其左儿子（若存在）权值，且小于右儿子（若存在）权值。</p>
<p>根据这个性质，我们可以很容易实现如下功能：</p>
<ul>
<li>查找最值</li>
<li>搜索特定元素</li>
<li>寻找第 $k$ 大</li>
<li>求元素排名</li>
</ul>
<p>上述时间复杂度都是 $O(h)$ 的。其中 $h$ 为树高。</p>
<p>一棵普通的二叉搜索树并不够平衡，树高可以卡到 $O(n)$。这并不理想，而平衡树就是通过一系列平衡调整操作使得树高维持在 $O(\log n)$。</p>
<h1 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h1><p>Treap 是一种弱平衡的二叉搜索树。其权值满足二叉搜索树的性质，随机权值满足堆（下文统一为小根堆）的性质。</p>
<h2 id="有旋-Treap"><a href="#有旋-Treap" class="headerlink" title="有旋 Treap"></a>有旋 Treap</h2><p>依靠旋转操作来维护树的平衡。</p>
<h3 id="前置约定"><a href="#前置约定" class="headerlink" title="前置约定"></a>前置约定</h3><p>对于节点 $i$，定义 $ls,rs,val,rk,w,sz$ 分别为左儿子，右儿子，权值，随机权值，权值个数，子树大小。</p>
<p>定义 $cnt$ 为节点总数，$rt$ 为根节点。</p>
<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>通过不改变树性质的同时改变树的层数。如图：</p>
<p> <img src="https://oi-wiki.org/ds/images/treap-rotate.svg" alt=""></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123; sz[id]=w[id]+sz[ls[id]]+sz[rs[id]]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lrotate</span><span class="params">(<span class="type">int</span> &amp;id)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t=rs[id];</span><br><span class="line">    rs[id]=ls[t], ls[t]=id;</span><br><span class="line">    <span class="built_in">pushup</span>(id), <span class="built_in">pushup</span>(t);</span><br><span class="line">    id=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rrotate</span><span class="params">(<span class="type">int</span> &amp;id)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t=ls[id];</span><br><span class="line">    ls[id]=rs[t], rs[t]=id;</span><br><span class="line">    <span class="built_in">pushup</span>(id), <span class="built_in">pushup</span>(t);</span><br><span class="line">    id=t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入节点跟普通二叉搜索树类似，但需要通过旋转操作满足堆的性质</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;id,<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!id) &#123;</span><br><span class="line">        id=++cnt;</span><br><span class="line">        ls[id]=rs[id]=<span class="number">0</span>;</span><br><span class="line">        val[id]=x;</span><br><span class="line">        rk[id]=<span class="built_in">rd</span>();</span><br><span class="line">        w[id]=sz[id]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sz[id]++;</span><br><span class="line">    <span class="keyword">if</span>(val[id]==x) <span class="keyword">return</span> w[id]++, <span class="built_in">void</span>();</span><br><span class="line">    <span class="keyword">if</span>(val[id]&lt;x) &#123;</span><br><span class="line">        <span class="built_in">insert</span>(rs[id],x);</span><br><span class="line">        <span class="keyword">if</span>(rk[id]&gt;rk[rs[id]]) <span class="built_in">lrotate</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">insert</span>(ls[id],x);</span><br><span class="line">        <span class="keyword">if</span>(rk[id]&gt;rk[ls[id]]) <span class="built_in">rrotate</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>分类讨论，若当前节点有多个值，就直接减去。若只有左儿子或右儿子，就直接将儿子提上来。否则，讨论左右儿子的随机权值，将其中一个点旋转上来作为根，递归去删需要删除的点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">del</span><span class="params">(<span class="type">int</span> &amp;id,<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!id) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(val[id]==x) &#123;</span><br><span class="line">        <span class="keyword">if</span>(w[id]&gt;<span class="number">1</span>) <span class="keyword">return</span> w[id]--, sz[id]--, <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ls[id]||!rs[id]) <span class="keyword">return</span> id=ls[id]+rs[id], <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(rk[ls[id]]&lt;rk[rs[id]]) &#123;</span><br><span class="line">            <span class="built_in">rrotate</span>(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">del</span>(id,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">lrotate</span>(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">del</span>(id,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val[id]&lt;x) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">del</span>(rs[id],x)) <span class="keyword">return</span> sz[id]--, <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">del</span>(ls[id],x)) <span class="keyword">return</span> sz[id]--, <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查询排名-查询前-k-大-查询前驱-查询后继"><a href="#查询排名-查询前-k-大-查询前驱-查询后继" class="headerlink" title="查询排名/查询前 $k$ 大/查询前驱/查询后继"></a>查询排名/查询前 $k$ 大/查询前驱/查询后继</h3><p>与二叉搜索树操作相同，在此不赘述</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qrk</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!id) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(val[id]==x) <span class="keyword">return</span> sz[ls[id]]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(val[id]&lt;x) <span class="keyword">return</span> sz[ls[id]]+w[id]+<span class="built_in">qrk</span>(rs[id],x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">qrk</span>(ls[id],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qkth</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!id) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=sz[ls[id]]) <span class="keyword">return</span> <span class="built_in">qnum</span>(ls[id],x);</span><br><span class="line">    <span class="keyword">if</span>(w[id]+sz[ls[id]]&lt;x) <span class="keyword">return</span> <span class="built_in">qnum</span>(rs[id],x-w[id]-sz[ls[id]]);</span><br><span class="line">    <span class="keyword">return</span> val[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">qpre</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!id) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(val[id]&lt;x) ans=val[id], <span class="built_in">qpre</span>(rs[id],x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">qpre</span>(ls[id],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsub</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!id) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(val[id]&gt;x) ans=val[id], <span class="built_in">qsub</span>(ls[id],x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="无旋Treap——fhq-treap"><a href="#无旋Treap——fhq-treap" class="headerlink" title="无旋Treap——fhq treap"></a>无旋Treap——fhq treap</h2><p>依靠分裂与合并维护树的平衡，省去了旋转操作，使得它支持维护序列、可持久化等特性。</p>
<p>代码比旋转 Treap 更好写，但常数更大。</p>
<h3 id="前置约定-1"><a href="#前置约定-1" class="headerlink" title="前置约定"></a>前置约定</h3><p>对于节点 $i$，定义 $ls,rs,val,rk,sz,lz$ 分别为左儿子，右儿子，权值，随机权值，子树大小，旋转的懒标记。</p>
<p>与旋转 Treap 不同的是，无旋 Treap 相同的权值不合并成一个节点。</p>
<p>定义 $cnt$ 为节点总数，$rt$ 为根节点。</p>
<p>定义 pushup 和 newnode 函数如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123; sz[id]=sz[ls[id]]+sz[rs[id]]+<span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> cnt++, val[cnt]=x, rk[cnt]=<span class="built_in">rd</span>(), sz[cnt]=<span class="number">1</span>, cnt; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="按值分裂"><a href="#按值分裂" class="headerlink" title="按值分裂"></a>按值分裂</h3><p>此函数将以 $id$ 为根的子树分裂成 $\le x$ 和 $&gt; x$ 两部分，并返回两部分的新根。</p>
<p>分类讨论根节点的情况，则其左儿子或右儿子一定整体属于某一部分，递归分裂另一部分子树即可。</p>
<p><img src="https://oi-wiki.org/ds/images/treap-none-rot-split-by-val.svg" alt=""></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">PII <span class="title">splitv</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!id) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(val[id]&lt;=x) &#123;</span><br><span class="line">        PII res=<span class="built_in">splitv</span>(rs[id],x);</span><br><span class="line">        rs[id]=res.first, <span class="built_in">pushup</span>(id);</span><br><span class="line">        <span class="keyword">return</span> &#123;id,res.second&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        PII res=<span class="built_in">splitv</span>(ls[id],x);</span><br><span class="line">        ls[id]=res.second, <span class="built_in">pushup</span>(id);</span><br><span class="line">        <span class="keyword">return</span> &#123;res.first,id&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="按排名分裂"><a href="#按排名分裂" class="headerlink" title="按排名分裂"></a>按排名分裂</h3><p>此函数将以 $id$ 为根的子树分裂成 $\le x,&gt;x$ 两部分。</p>
<p>分裂讨论排名为 $x$ 的节点在哪个位置。其实现和旋转 Treap 中查询第 $k$ 大相似。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">PII <span class="title">splitrk</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!id) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=sz[ls[id]]) &#123;</span><br><span class="line">        PII res=<span class="built_in">splitrk</span>(ls[id],x);</span><br><span class="line">        ls[id]=res.second, <span class="built_in">pushup</span>(id);</span><br><span class="line">        <span class="keyword">return</span> &#123;res.first,id&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==sz[ls[id]]+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> p=rs[id];</span><br><span class="line">        rs[id]=<span class="number">0</span>, <span class="built_in">pushup</span>(id);</span><br><span class="line">        <span class="keyword">return</span> &#123;id,p&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    PII res=<span class="built_in">splitrk</span>(rs[id],x-sz[ls[id]]<span class="number">-1</span>);</span><br><span class="line">    rs[id]=res.first, <span class="built_in">pushup</span>(id);</span><br><span class="line">    <span class="keyword">return</span> &#123;id,res.second&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>将以 $x$ 为根的树和以 $y$ 为根的树合并，必须满足 $x$ 中所有节点的值小于等于 $y$ 中所有节点的值。由于合并的两个 Treap 通常都是原来从同一个 Treap 分裂出的，所以满足该性质。</p>
<p>合并过程中，需要使随机权值满足小根堆性质，因此分类讨论：</p>
<p>若 $x$ 的随机权值比 $y$ 小，那么 $x$ 需要做新树的根节点，并且为了满足二叉搜索树的性质，$y$ 与 $x$ 的右子树进行合并。反之，$y$ 做新树的根节点，$x$ 与 $y$ 的左子树合并。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">    <span class="keyword">if</span>(rk[x]&lt;rk[y]) &#123;</span><br><span class="line">        rs[x]=<span class="built_in">merge</span>(rs[x],y), <span class="built_in">pushup</span>(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ls[y]=<span class="built_in">merge</span>(x,ls[y]), <span class="built_in">pushup</span>(y);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><p>插入权值 $x$。</p>
<p>将树按值分裂为 $&lt;x$ 和 $\ge x$ 两部分，再合并回去。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    PII res=<span class="built_in">splitv</span>(rt,x);</span><br><span class="line">    rt=<span class="built_in">merge</span>(<span class="built_in">merge</span>(res.first,<span class="built_in">newnode</span>(x)),res.second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>删除一个权值 $x$。</p>
<p>将树分裂成 $<x,=x,>x$ 三部分，将第二部分的根删去，并合并三棵树。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    PII res1=<span class="built_in">splitv</span>(rt,x<span class="number">-1</span>), res2=<span class="built_in">splitv</span>(res1.second,x);</span><br><span class="line">    <span class="type">int</span> l=res1.first, mid=res2.first, r=res2.second;</span><br><span class="line">    mid=<span class="built_in">merge</span>(ls[mid],rs[mid]);</span><br><span class="line">    rt=<span class="built_in">merge</span>(<span class="built_in">merge</span>(l,mid),r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查询排名-查询前-k-大-查询前驱-查询后继-1"><a href="#查询排名-查询前-k-大-查询前驱-查询后继-1" class="headerlink" title="查询排名/查询前 $k$ 大/查询前驱/查询后继"></a>查询排名/查询前 $k$ 大/查询前驱/查询后继</h3><p>依旧是二叉搜索树基本操作，下面给出非递归版本和其他实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qrk</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    PII res=<span class="built_in">splitv</span>(rt,x<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> ans=sz[res.first]+<span class="number">1</span>;</span><br><span class="line">    rt=<span class="built_in">merge</span>(res.first,res.second);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qkth</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> id=rt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=sz[ls[id]]) id=ls[id];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==sz[ls[id]]+<span class="number">1</span>) <span class="keyword">return</span> val[id];</span><br><span class="line">        <span class="keyword">else</span> x-=sz[ls[id]]+<span class="number">1</span>, id=rs[id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> _qkth(<span class="type">int</span> x) &#123;</span><br><span class="line">    PII res1=<span class="built_in">splitrk</span>(rt,x<span class="number">-1</span>), res2=<span class="built_in">splitrk</span>(res1.second,<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> ans=val[res2.first];</span><br><span class="line">    <span class="built_in">merge</span>(<span class="built_in">merge</span>(res1.first,res2.first),res2.second);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpre</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> id=rt, ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(id) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val[id]&lt;x) ans=val[id], id=rs[id];</span><br><span class="line">        <span class="keyword">else</span> id=ls[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> _qpre(<span class="type">int</span> x) &#123; <span class="keyword">return</span> <span class="built_in">qkth</span>(<span class="built_in">qrk</span>(x)<span class="number">-1</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsub</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> id=rt, ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(id) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val[id]&gt;x) ans=val[id], id=ls[id];</span><br><span class="line">        <span class="keyword">else</span> id=rs[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> _qsub(<span class="type">int</span> x) &#123; <span class="keyword">return</span> <span class="built_in">qkth</span>(<span class="built_in">qrk</span>(x+<span class="number">1</span>)); &#125;</span><br></pre></td></tr></table></figure>
<h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p>无旋 Treap 可以将区间建树，以下标作为权值插入 treap 中，满足中序遍历为这个区间。</p>
<p>依次插入元素，时间复杂度 $O(n\log n)$。</p>
<p>注意到 Treap 是笛卡尔树，因此按照笛卡尔树建树方法即可，时间复杂度 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ls[id]) <span class="built_in">dfs</span>(ls[id]);</span><br><span class="line">    <span class="keyword">if</span>(rs[id]) <span class="built_in">dfs</span>(rs[id]);</span><br><span class="line">    <span class="built_in">pushup</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]=i, rk[i]=<span class="built_in">rd</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;rk[st[top]]&gt;rk[i]) p=st[top--];</span><br><span class="line">        ls[i]=p;</span><br><span class="line">        <span class="keyword">if</span>(top) rs[st[top]]=i;</span><br><span class="line">        st[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    rt=st[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">dfs</span>(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区间翻转"><a href="#区间翻转" class="headerlink" title="区间翻转"></a>区间翻转</h3><p>需要使得树的中序遍历等于维护的序列。</p>
<p>将区间 $[l,r]$ 翻转的操作，可以将树分成 $[1,l-1],[l,r],[r+1,n]$ 三个区间，对中间的树进行翻转，再合并。暴力翻转显然不行，在节点上打上懒标记，访问到再下传即可。</p>
<p><img src="https://oi-wiki.org/ds/images/treap-none-rot-seg-flip-ex.svg" alt=""></p>
<p>在 split 和 merge 等函数中要及时下传懒标记，在此不展示。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!lz[id]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">swap</span>(ls[id],rs[id]);</span><br><span class="line">    lz[ls[id]]^=<span class="number">1</span>, lz[rs[id]]^=<span class="number">1</span>, lz[id]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    PII res1=<span class="built_in">splitrk</span>(rt,l<span class="number">-1</span>), res2=<span class="built_in">splitrk</span>(res1.second,r-l+<span class="number">1</span>);</span><br><span class="line">    lz[res2.first]^=<span class="number">1</span>;</span><br><span class="line">    rt=<span class="built_in">merge</span>(<span class="built_in">merge</span>(res1.first,res2.first),res2.second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>在需要改变结构的地方新建节点即可。只在 split,merge,reverse,pushdown 中和非持久化有区别。</p>
<p>可以用这种方式理解：当某个节点的左右儿子有变化，就需要新建节点。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://oi-wiki.org/ds/treap/">Treap - OI Wiki</a></p>
<p><a href="https://www.cnblogs.com/zheyuanxie/p/fhq-treap.html">无旋树堆(FHQ-Treap)学习笔记 _</a></p>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>treap</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串基础整理</title>
    <url>/2023/09/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="前置算法"><a href="#前置算法" class="headerlink" title="前置算法"></a>前置算法</h1><h2 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h2><p>定义 $s(l,r)$ 为 $s$ 的子串 $s[l\dots r]$ 。</p>
<h2 id="前缀函数与kmp"><a href="#前缀函数与kmp" class="headerlink" title="前缀函数与kmp"></a>前缀函数与kmp</h2><p>对于一个长度为 $n$ 的字符串 $s$ ，其前缀函数被定义为一个长度为 $n$ 的数组 $\pi$ 。其中 $\pi[i]$ 为长度为 $i$ 的前缀 $t$ 中的最长border长度，border即一个最长的非 $t$ 本身的子串，满足既是 $t$ 的前缀，又是 $t$ 的后缀。也可以用如下语言描述：</p>
<script type="math/tex; mode=display">\pi[i]=\max\limits_{k=1}^{i-1}(k:s[1\dots k]=s[i-(k-1)\dots i])</script><p>求 $\pi[i]$ 时，我们可以考虑从 $\pi[i-1]$ 继承过来，因为 $s(i-\pi[i]+1,i)$ 一定是先由 $s(i-\pi[i]+1,i-1)$ 匹配一个前缀 $s(1,\pi[i]-1)$ ，$s[i]$ 再和 $s[\pi[i]]$ 匹配。</p>
<p>即 $\pi[i]$ 是最大的满足条件的 $v$，其中 $s(1,v-1)$ 是 $s(1,\pi[i-1])$ 的后缀，需要满足 $s[v]=s[i]$ 。</p>
<p>如何找出所有的 $v$ 呢？</p>
<p>首先 $\pi[i-1]$ 一定是最大的 $v$ ，若它不满足条件，我们要继续找次大的 $v$ 。</p>
<p>因为 $s(1,\pi[i-1])=s(i-\pi[i-1]+1,i-1]$ ，所以 $\pi[\pi[i-1]]$ 同时是 $s(i-\pi[i-1]+1,i-1)$ 的border 。满足 $s(1,\pi[\pi[i])=s(i-\pi[\pi[i]],i-1)$ ，即，次大的 $v$ 就是 $\pi[\pi[i]]$ ，一直向下跳下去即可。</p>
<p>时间复杂度感性理解：时间复杂度与跳 $v$ 的次数相关，并且当前 $i$ 跳完后的 $\pi[i]=v$ 是继承到 $i+1$ 的，因此它能跳的步数每次会增加一次，而每次失配则跳一次，跳的步数 $\le$ n，因此时间复杂度 $O(n)$ 。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">    <span class="type">int</span> j=nxt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">while</span>(s[j+<span class="number">1</span>]!=s[i]&amp;&amp;j) j=nxt[j];</span><br><span class="line">    nxt[i]=(s[j+<span class="number">1</span>]==s[i]? j+<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>kmp算法是前缀函数的运用，用于求 $s$ 中有多少子串和 $t$ 完全相同。<br>其实和上述算法是几乎相同的。</p>
<p>一些推论：<br>$s$ 的最小循环元长度为 $n-\pi[n]$ 。并且任何其他满足条件的循环元长度都是其倍数。</p>
<h2 id="exkmp-Z函数"><a href="#exkmp-Z函数" class="headerlink" title="exkmp(Z函数)"></a>exkmp(Z函数)</h2><p>对于一个长度为 $n$ 的字符串 $s$ ，其Z函数被定义为一个长度为 $n$ 的数组 $z$ 。其中 $z[i]$ 表示 $s$ 与 $s[i\dots n]$ 的LCP。</p>
<p>根据定义（当然依旧可以画图直观理解）：</p>
<script type="math/tex; mode=display">
s[i+(x)]\\
=s[l+(i+x-l)]\\
=s[0+(i+x-l)](x\le z[l]+l-i)\\
=s[i-l+(x)]\\
=s[0+(x)](x\le z[i-l])</script><p>因此 $z[i] \ge \min(z[l]+l-i,z[i-l])$ 。</p>
<p>考虑每一步转换的实际含义，我们发现能使得 $z[l]+l-i$ 越大的 $l(l&lt;i)$ 越优，设 $r=z[l]+l$，即找到最大的 $r$。</p>
<p>每次我们将 $z[i]\leftarrow \min(z[l]+l-i,z[i-l])$ ，然后暴力往后跳即可，因为 $r$ 递增，因此时间复杂度 $O(n)$ 。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> l=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(z[l]+l&gt;=i) z[i]=<span class="built_in">min</span>(z[l]+l-i,z[i-l+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">while</span>(i+z[i]&lt;=n&amp;&amp;s[z[i]+<span class="number">1</span>]==s[i+z[i]]) z[i]++;</span><br><span class="line">    <span class="keyword">if</span>(z[i]+i&gt;z[l]+l) l=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><p>AC自动机就是把 kmp 放到了 trie 树上，通常用于多文本串匹配，子串问题。</p>
<p>与 kmp 相同，需要建立 fail 指针，即失配后跳到的位置。</p>
<p>对于一个点 $x$，我们设 $f$ 为 $x$ 的父亲，并且 $(f,x)$ 的边权为 $c$，则 $f$ 不断地跳 fail 指针，直到当前点有边权为 $c$ 的出边，则 $fail(x)$ 即为出边对应的点。</p>
<p>与 kmp 不同的是，每次都跳 fail 太慢了。考虑如下代码实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[x][i]) fail[nxt[x][i]]=nxt[fail[x]][i], q.<span class="built_in">push</span>(nxt[x][i]);</span><br><span class="line">            <span class="keyword">else</span> nxt[x][i]=nxt[fail[x]][i]; <span class="comment">//优化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即，若当前点 $x$ 没有连向 $c$ 的出边，直接连向 $fail(x)$ 对应的出边，相当于路径压缩，这样就是线性的了。</p>
<p>AC自动机上的点对应一个串的后缀，而后缀去匹配前缀，就是子串，因此 AC 自动机常用于子串问题。</p>
<h2 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h2><p>后缀数组将字符串 $s$ 的所有后缀构成的子串都拿出来进行了排序。通常用于解决子串问题。</p>
<p>考虑如何去求后缀数组，暴力排序，二分哈希求 lcp，时间复杂度 $O(n \log^2 n)$。</p>
<p>但是这并没有用到后缀的性质，考虑使用倍增的方法去解决这个问题。</p>
<p>第一次排序使用当前下标对应的值；第二次用当前排名作为第一关键字，它原下标后面那个数的排名作为第二关键字；第 $i$ 次用后面第 $2^{i-1}$ 的排名作为第二关键字。</p>
<p><img src="https://xxzx.moe/wp-content/uploads/2023/10/字符串1-300x239.png" alt=""></p>
<h2 id="manacher"><a href="#manacher" class="headerlink" title="manacher"></a>manacher</h2><p>求以每个点为回文中心的最长扩展长度 $l_i$。</p>
<p>为了避免分类讨论偶回文和奇回文，统一在间隔处添加特殊字符 ‘!’。</p>
<p>接下来依旧是：从过去已推出的部分来优化当前的操作。</p>
<p>设 $p$ 为当前 $p+l_p-1$最大的。当前要推 $l_i$。</p>
<p>若 $i\le p+l_p-1$,设 $j=2p-i$ 为 $i$ 关于 $p$ 的对称点。画图可得，$p_i\leftarrow \min(p+l_p-i,l_j)$。</p>
<p>更详细地说，设 $sl(l,r)$ 为将 $s(l,r)$ 首尾翻转的结果。不妨假设 $i+l_j-1\le p+l_p-1$，由一系列定义可知：</p>
<p>$s(i,i+l_j-1)=sl(j,j-l_j+1)=s(j,j+l_j-1)=sl(i,i-l_i+1)$</p>
<p>接下来暴力扩展即可，每次扩展 $\max(p+l_p-1)$ 递增，时间复杂度 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">    l[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=p+l[p]<span class="number">-1</span>) l[i]=<span class="built_in">min</span>(l[<span class="number">2</span>*p-i],p+l[p]-i);</span><br><span class="line">    <span class="keyword">while</span>(i+l[i]&lt;=n&amp;&amp;i-l[i]&gt;=<span class="number">1</span>&amp;&amp;st[i+l[i]]==st[i-l[i]]) l[i]++;</span><br><span class="line">    <span class="keyword">if</span>(i+l[i]&gt;p+l[p]) p=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="CF808G"><a href="#CF808G" class="headerlink" title="CF808G"></a>CF808G</h2><p>如果匹配的 $s$ 不能重叠，设 $f_i$ 表示 $t(1,i)$ 最多能匹配几个 $s$ ，转移是平凡的。如果能重叠，还要设 $g_i$ 表示 $t(1,i)$ 并强制钦定以 $i$ 结尾的串匹配了 $s$ ，辅助转移 $f$ 。我们发现重叠的部分就是border，一直跳 $nxt$ 即可。</p>
<h2 id="NOIP2020-字符串匹配"><a href="#NOIP2020-字符串匹配" class="headerlink" title="[NOIP2020] 字符串匹配"></a>[NOIP2020] 字符串匹配</h2><p>首先可以预处理出 $pre,suf$ 分别表示每一个前缀和后缀出现奇数次字符的数量。</p>
<p>先从小到大枚举AB长度 $i$ ，后面就是C，方案数即 $pre_j\le suf_i+1 (j&lt;i)$ 的数量。</p>
<p>因为 $i$ 是从小到大枚举的，我们设 $c$ ，每次 $c[pre_i\dots 26]++$ 即可。<br>因为AB可以重复好几段，我们枚举 $i$ 的倍数，并判断是否形如 </p>
<p>$ABAB\dots AB$ ，可以用kmp的循环元，也可以哈希。</p>
<h2 id="「TAOI-2」Ciallo～-∠・ω-lt-⌒★"><a href="#「TAOI-2」Ciallo～-∠・ω-lt-⌒★" class="headerlink" title="「TAOI-2」Ciallo～(∠・ω&lt; )⌒★"></a>「TAOI-2」Ciallo～(∠・ω&lt; )⌒★</h2><p>$t$ 有可能在 $s$ 中是完整的段，是好算的。</p>
<p>也可能是中间扣掉一段，拼成 $t$ 。<br>设 $t$ 的长度为 $n$ 。枚举左半段的长度 $i$ ，设 $s(j,j+i-1)=t(1,i)$ 的合法的 $j$ 的集合为A，同理 $s(j-n+1+i,j)=t(i+1,n)$ 的合法的 $j$ 的集合为B。 </p>
<p>我们要计算的是 $j-i+1&gt;n(i\in A,j\in B)$ 的个数。</p>
<p>我们可以算出每一个端点作为 $t$ 的开头能向右延伸多长，以及作为结尾能向左延伸多长。每个点在集合中的进出都只有 $1$ 次，其贡献可以在树状数组中求得。</p>
<h2 id="CF1310C"><a href="#CF1310C" class="headerlink" title="CF1310C"></a>CF1310C</h2><p>把S的所有子串拿出来按字典序升序排序，二分，判断即数出将S划分成 $m$ 段，且每段的字典序都小于等于二分的子串的方案数， $O(n^2)$ dp是容易的，判断两串字典序可以先预处理出每两个后缀的LCP。</p>
<h2 id="CF1562E"><a href="#CF1562E" class="headerlink" title="CF1562E"></a>CF1562E</h2><p>$s(l,r+1)$ 的字典序一定大于等于 $s(l,r)$ 。<br>结论是若填了 $s(l,r)$ ，则 $s(l,r+1),s(l,r+2),\dots,s(l,n)$ 都选上一定不劣。</p>
<p>反证，若 $s(l,n)$ 不选能使答案变优，则一定是增加了一些字典序小于 $s(l,n)$ ，大于 $s(l,n-1)$ 的串，我们发现这样的串的前缀一定是 $s(l,n-1)$ 因此对于固定的 $i$ ，满足条件的 $s(i,i+n-l)$ 最多只有一个，如此归纳下去发现不会更优。</p>
<p>因此可以dp，设 $f_i$ 表示选择了以 $i$ 为左端点的一堆连续串，最大的个数。预处理分别以 $i,j$ 为左端点的串的lcp即可转移。</p>
<h2 id="国家集训队-等差子序列"><a href="#国家集训队-等差子序列" class="headerlink" title="[国家集训队] 等差子序列"></a>[国家集训队] 等差子序列</h2><p>只需要找出长度为 $3$ 的等差数列。</p>
<p>$i$ 从 $1 \rightarrow n$ 枚举这个数是否可以作为等差数列的中间项，设 $p$ ，满足 $p[a[j]]=1(j&lt;i)$，那么判定等价于存在 $v$ ，满足 $p[a[i]+v]+p[a[i]-v]=1$ 。</p>
<p>可以发现不合法的时候 $p$ 是以 $a_i$ 为中心的回文串。用线段树去维护一段区间正序/逆序的哈希值。</p>
<h2 id="CF1598G"><a href="#CF1598G" class="headerlink" title="CF1598G"></a>CF1598G</h2><p>加法运算的进位至多为 $1$。那么其中一个数的位数一定 $\ge |s|-1$ 。<br>若我们确定了其中一个数，记它与 $s$ 的 lcp 为 $l$，另一个数的长度一定为 $l$ 或 $l-1$ 。</p>
<p>lcp 用 Z 函数求解，两数加法使用十进制下的哈希，随机多个模数。</p>
<h2 id="好题"><a href="#好题" class="headerlink" title="好题"></a>好题</h2><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>将长度为 $n$ 的字符串 $S$ 分成五段 $A+B+C+D+E=S$,其中$A,B,C,D,E$ 可以为空串。</p>
<p>最大化 $|A|+|C|+|E|$，使得 $A+C+E$ 是回文串。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先 $A,E$ 一定是原串中的一段前/后缀，且 $A$ 中的一段前缀是和 $E$ 中的一段后缀匹配的，可以发现对于这一部分，能匹配就匹配，一定不劣，然后就可以扣掉了。</p>
<p>现在的子问题变为，将串分为 $A+B+C+D$ 四部分，使得 $A+C$ 或 $B+D$ 为回文串且长度尽可能大。将串翻转，$B+D$ 的情况就变成 $A+C$，因此接下来只需要讨论 $A+C$ 的情况。</p>
<p>分类讨论，枚举 $A+C$ 的回文中心在哪。</p>
<p>若回文中心在 $A$ 中，相当于 $A$ 的一段后缀自成一段回文串，剩下部分在右侧存在匹配的部分。贪心地想，$A$ 后缀形成的回文串一定是尽可能大的，用manacher求解。剩下的部分，可以将原串与原串反串进行拼接，就变成了lcp问题，通过exkmp求解。回文中心在 $B$ 中的情况是同理的。</p>
<p>代码调了比较久，列举一些错误点：</p>
<ol>
<li><p>manacher中加入了特殊字符，去掉的时候，注意是奇回文还是偶回文，它们向两边的扩展长度不一定一样长。</p>
</li>
<li><p>exkmp中，由于经过了字符串拼接，注意处理边界问题，取值不能超过原串。</p>
</li>
</ol>
<p>以及如何调试：讨论下来一共就两种情况（回文中心在哪），可以尝试手造两种情况的小数据，看看是哪部分错的。</p>
<p><a href="https://github.com/Buttiyeeppp/Code/blob/master/HLOJ/C23151.cpp">Code</a></p>
<h2 id="CF547E"><a href="#CF547E" class="headerlink" title="CF547E"></a>CF547E</h2><p>将询问差分，只需要解决形如询问 $s_k$ 在 $s_{1\dots r}$ 中出现了多少次。</p>
<p>先将 $s_{1\dots n}$ 建立 AC 自动机，构造 fail 指针。</p>
<p>再依次插入 $s_i​$，将 $s_i​$ 的每个前缀权值 $+1​$，并处理  $s_{1\dots i}​$ 的询问。每次询问的都是 fail 树的子树。树状数组维护即可。</p>
<h2 id="CF587F"><a href="#CF587F" class="headerlink" title="CF587F"></a>CF587F</h2><p>和 CF547E 很像。先沿用它的做法做修改：插入 $s_i$ 时将结尾的点权值 $+1$，询问则将每个前缀节点子树求和。</p>
<p>复杂度瓶颈在查询上。考虑分块。</p>
<p>若询问的 $|s_i|\le B$，平凡求解，时间复杂度 $O(qB\log n)$。使用分块代替树状数组可以做到更优的复杂度。</p>
<p>若询问的 $|s_i|&gt; B$，将它的询问单独处理。将 $s_i$ 每个前缀节点权值 $+1$。插入 $s$ 时，答案加上结尾点的子树权值和。预处理子树和可以做到线性。设 $l=\sum\limits_i|s_i|$，时间复杂度 $O(\dfrac{l^2}{B})$。</p>
<h2 id="CF1393E2"><a href="#CF1393E2" class="headerlink" title="CF1393E2"></a>CF1393E2</h2><p>朴素的 dp，设 $f_{i,j}$ 为考虑前 $i$ 个字符串，第 $i$ 个字符串删除第 $j$ 个字符，字典序不降的方案数。设 $s_{i,j}$ 为第 $i$ 个字符串删除第 $j$ 个字符后的串。</p>
<p>考虑先将每个 $f_i$ 的第二维 $j$ 按 $s_{i,j}$ 的字典序排序，这样对于每个 $f_{i,j}$，可以转移的 $f_{i-1,k}$ 就是一个前缀，且 $k$ 随着 $i$ 的增大单调不减，可以双指针。</p>
<p>先解决排序的问题，对于串 $s$，若 $s_i&gt;s_{i+1}$，则删除 $s_i$ 一定比删去后面任意的字符字典序都要小。$s_i&lt;s_{i+1}$ 类似。倒叙枚举 $i$，每次把 $i$ 放在开头或末尾即可。</p>
<p>现在的瓶颈在于如何判断 $s_{i,j}$ 和 $s_{i+1,k}$ 的字典序大小。不妨假设 $j\le k$，$j&gt;k$ 的情况同理类推。不难线性预处理出 $s_i,s_{i+1}$ 两串的 LCP，若 LCP 长度 $&lt;j$ 则问题解决。否则，需要比较 $s_{i}(j+1,k),s_{i+1}(j,k-1)$ 的字典序大小。由于两者开头相差 $1$，不难预处理出两串的 LCP，即可求解。若相同，则是后缀 LCP 问题，类似。</p>
<p>时间复杂度线性。</p>
<h2 id="CF1252D"><a href="#CF1252D" class="headerlink" title="CF1252D"></a>CF1252D</h2><p>将询问离线，并建立 AC 自动机。</p>
<p>考虑每个小 L 形，都可以表示为一个极大 L 形的子串，我们只需要在极大 L形上计数即可。更形式化地说，枚举 L 形拐点 $(x,y)$，我们需要计算 $(x,1)\rightarrow (x,y)\rightarrow (n,y)$ 这个极大 $L$ 形。注意到，若直接计算它所有子串的贡献，会算重一些没有经过拐点的子串。减去 $(x,1)\rightarrow (x,y-1),(x+1,y)\rightarrow (n,y)$ 即可。</p>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>经验总结</title>
    <url>/2023/09/14/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d2deb99b9005c08a02d483e1384e97791e43f1b9531db86c7537424bdbe536e6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
  </entry>
</search>
